<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitsNet.Duration</name>
    </assembly>
    <members>
        <member name="T:UnitsNet.Duration">
            <inheritdoc />
            <summary>
                Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
            </summary>
        </member>
        <member name="F:UnitsNet.Duration._value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="F:UnitsNet.Duration._unit">
            <summary>
                The unit this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Value">
            <summary>
                The numeric value this quantity was constructed with.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Unit">
            <inheritdoc />
        </member>
        <member name="M:UnitsNet.Duration.#ctor(System.Double,UnitsNet.Units.DurationUnit)">
            <summary>
                Creates the quantity with the given numeric value and unit.
            </summary>
            <param name="value">The numeric value to construct this quantity with.</param>
            <param name="unit">The unit representation to construct this quantity with.</param>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="P:UnitsNet.Duration.BaseUnit">
            <summary>
                The base unit of Duration, which is Second. All conversions go via this value.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.MaxValue">
            <summary>
            Represents the largest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.MinValue">
            <summary>
            Represents the smallest possible value of Duration
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Zero">
            <summary>
                Gets an instance of this quantity with a value of 0 in the base unit Second.
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Days">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Day"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Hours">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Hour"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.JulianYears">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.JulianYear"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Microseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Microsecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Milliseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Millisecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Minutes">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Minute"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Months30">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Month30"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Nanoseconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Nanosecond"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Seconds">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Second"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Weeks">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Week"/>
            </summary>
        </member>
        <member name="P:UnitsNet.Duration.Years365">
            <summary>
                Gets a <see cref="T:System.Double"/> value of this quantity converted into <see cref="F:UnitsNet.Units.DurationUnit.Year365"/>
            </summary>
        </member>
        <member name="M:UnitsNet.Duration.FromDays(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Day"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromHours(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Hour"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromJulianYears(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.JulianYear"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMicroseconds(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Microsecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMilliseconds(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Millisecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMinutes(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Minute"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromMonths30(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Month30"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromNanoseconds(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Nanosecond"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromSeconds(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Second"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromWeeks(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Week"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.FromYears365(System.Double)">
            <summary>
                Creates a <see cref="T:UnitsNet.Duration"/> from <see cref="F:UnitsNet.Units.DurationUnit.Year365"/>.
            </summary>
            <exception cref="T:System.ArgumentException">If value is NaN or Infinity.</exception>
        </member>
        <member name="M:UnitsNet.Duration.From(System.Double,UnitsNet.Units.DurationUnit)">
            <summary>
                Dynamically convert from value and unit enum <see cref="T:UnitsNet.Units.DurationUnit" /> to <see cref="T:UnitsNet.Duration" />.
            </summary>
            <param name="value">Value to convert from.</param>
            <param name="fromUnit">Unit to convert from.</param>
            <returns>Duration unit value.</returns>
        </member>
        <member name="M:UnitsNet.Duration.As(UnitsNet.Units.DurationUnit)">
            <summary>
                Convert to the unit representation <paramref name="unit" />.
            </summary>
            <returns>Value converted to the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.ToUnit(UnitsNet.Units.DurationUnit)">
            <summary>
                Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
            </summary>
            <returns>A Duration with the specified unit.</returns>
        </member>
        <member name="M:UnitsNet.Duration.GetValueInBaseUnit">
            <summary>
                Converts the current value + unit to the base unit.
                This is typically the first step in converting from one unit to another.
            </summary>
            <returns>The value in the base unit representation.</returns>
        </member>
    </members>
</doc>
